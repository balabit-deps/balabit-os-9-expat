From c803b93e8736ed255ff1a6db5ab6add7ccea736c Mon Sep 17 00:00:00 2001
From: Snild Dolkow <snild@sony.com>
Date: Fri, 25 Aug 2023 14:49:29 +0200
Subject: [PATCH] minicheck: Add simple subtest support

This will be useful when a test runs through several examples and
fails somewhere in the middle. The subtest string replaces the
phase_info string (i.e. "during actual test") in the failure output.
---
Index: expat-2.4.7/expat/tests/minicheck.c
===================================================================
--- expat-2.4.7.orig/expat/tests/minicheck.c
+++ expat-2.4.7/expat/tests/minicheck.c
@@ -15,6 +15,7 @@
    Copyright (c) 2017      Rhodri James <rhodri@wildebeest.org.uk>
    Copyright (c) 2018      Marco Maggi <marco.maggi-ipsu@poste.it>
    Copyright (c) 2019      David Loffredo <loffredo@steptools.com>
+   Copyright (c) 2023      Sony Corporation / Snild Dolkow <snild@sony.com>
    Licensed under the MIT license:
 
    Permission is  hereby granted,  free of charge,  to any  person obtaining
@@ -37,6 +38,7 @@
    USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
 
+#include <stdarg.h>
 #include <stdio.h>
 #include <stdlib.h>
 #include <setjmp.h>
@@ -132,17 +134,35 @@ srunner_create(Suite *suite) {
 
 static jmp_buf env;
 
+#define SUBTEST_LEN (50) // informative, but not too long
 static char const *_check_current_function = NULL;
+static char _check_current_subtest[SUBTEST_LEN];
 static int _check_current_lineno = -1;
 static char const *_check_current_filename = NULL;
 
 void
 _check_set_test_info(char const *function, char const *filename, int lineno) {
   _check_current_function = function;
+  set_subtest("%s", "");
   _check_current_lineno = lineno;
   _check_current_filename = filename;
 }
 
+void
+set_subtest(char const *fmt, ...) {
+  va_list ap;
+  va_start(ap, fmt);
+  vsnprintf(_check_current_subtest, SUBTEST_LEN, fmt, ap);
+  va_end(ap);
+  // replace line feeds with spaces, for nicer error logs
+  for (size_t i = 0; i < SUBTEST_LEN; ++i) {
+    if (_check_current_subtest[i] == '\n') {
+      _check_current_subtest[i] = ' ';
+    }
+  }
+  _check_current_subtest[SUBTEST_LEN - 1] = '\0'; // ensure termination
+}
+
 static void
 handle_success(int verbosity) {
   if (verbosity >= CK_VERBOSE) {
@@ -154,6 +174,9 @@ static void
 handle_failure(SRunner *runner, int verbosity, const char *phase_info) {
   runner->nfailures++;
   if (verbosity != CK_SILENT) {
+    if (strlen(_check_current_subtest) != 0) {
+      phase_info = _check_current_subtest;
+    }
     printf("FAIL: %s (%s at %s:%d)\n", _check_current_function, phase_info,
            _check_current_filename, _check_current_lineno);
   }
@@ -170,6 +193,7 @@ srunner_run_all(SRunner *runner, int ver
     volatile int i;
     for (i = 0; i < tc->ntests; ++i) {
       runner->nchecks++;
+      set_subtest("%s", "");
 
       if (tc->setup != NULL) {
         /* setup */
@@ -185,6 +209,7 @@ srunner_run_all(SRunner *runner, int ver
         continue;
       }
       (tc->tests[i])();
+      set_subtest("%s", "");
 
       /* teardown */
       if (tc->teardown != NULL) {
Index: expat-2.4.7/expat/tests/minicheck.h
===================================================================
--- expat-2.4.7.orig/expat/tests/minicheck.h
+++ expat-2.4.7/expat/tests/minicheck.h
@@ -15,6 +15,7 @@
    Copyright (c) 2004-2006 Fred L. Drake, Jr. <fdrake@users.sourceforge.net>
    Copyright (c) 2006-2012 Karl Waclawek <karl@waclawek.net>
    Copyright (c) 2016-2017 Sebastian Pipping <sebastian@pipping.org>
+   Copyright (c) 2023      Sony Corporation / Snild Dolkow <snild@sony.com>
    Licensed under the MIT license:
 
    Permission is  hereby granted,  free of charge,  to any  person obtaining
@@ -56,6 +57,19 @@ extern "C" {
 #  define __func__ __FUNCTION__
 #endif
 
+/* PRINTF_LIKE has two effects:
+    1. Make clang's -Wformat-nonliteral stop warning about non-literal format
+       strings in annotated functions' code.
+    2. Make both clang and gcc's -Wformat-nonliteral warn about *callers* of
+       the annotated function that use a non-literal format string.
+*/
+#  if defined(__GNUC__)
+#    define PRINTF_LIKE(fmtpos, argspos)                                       \
+      __attribute__((format(printf, fmtpos, argspos)))
+#  else
+#    define PRINTF_LIKE(fmtpos, argspos)
+#  endif
+
 #define START_TEST(testname)                                                   \
   static void testname(void) {                                                 \
     _check_set_test_info(__func__, __FILE__, __LINE__);                        \
@@ -64,6 +78,8 @@ extern "C" {
   }                                                                            \
   }
 
+void PRINTF_LIKE(1, 2) set_subtest(char const *fmt, ...);
+
 #define fail(msg) _assert_true(0, __FILE__, __LINE__, msg)
 
 #define assert_true(cond)                                                      \
